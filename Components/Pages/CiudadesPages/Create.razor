@page "/Ciudades/Create"
@inject CiudadesService ciudadesService
@inject NavigationManager navigation
@rendermode InteractiveServer

<PageTitle>Agregar Ciudad</PageTitle>
<EditForm Model="nuevoCliente" OnValidSubmit="GuardarCliente">
    <DataAnnotationsValidator />
    <div class="container">
        <div class="card shadow">
            <div class="card-header text-center bg-danger text-white">
                <h4>Registrar Nueva Ciudad</h4>
            </div>

            <div class="card-body">
                <!-- Campo: CiudadId -->
                <div class="form-group">
                    <label for="clienteId"><strong>ID del Cliente</strong></label>
                    <InputNumber id="clienteId" class="form-control" @bind-Value="nuevoCliente.ClienteId" readonly />
                    <ValidationMessage For="@(() => nuevaCiudad.CiudadId)" />
                </div>

                <!-- Campo: CiudadNombre -->
                <div class="form-group">
                    <label for="nombre"><strong>Nombre del Cliente</strong></label>
                    <InputText id="nombre" class="form-control" @bind-Value="nuevoCliente.Nombres" />
                    <ValidationMessage For="@(() => nuevaCiudad.CiudadNombre)" />
                </div>

            </div>

            <div class="card-footer text-center">
                <button type="submit" class="btn btn-success ml-2">Registrar</button>
                <a href="/Ciudades/Index" class="btn btn-danger ml-2">Volver</a>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public Ciudades nuevaCiudad = new Ciudades();
    [Inject] protected ToastService ToastService { get; set; }
    public List<Ciudades> Ciudades { get; set; } = new List<Ciudades>();

    protected override async Task OnInitializedAsync()
    {
        Ciudades = await ciudadesService.Listar(c => c.CiudadId > 0);

    }

    public async Task<bool> Validar()
    {
        var ciudadDuplicada = await ciudadesService.BuscarNombres(nuevaCiudad.CiudadNombre);

        if (ciudadDuplicada != null)
        {
            ToastService.Notify(new(ToastType.Warning, "El nombre de la ciudad ya está registrada", " Por favor, utiliza un nombre diferente."));

            return false;
        }

        return true;
    }

    public async Task GuardarCiudad()
    {
        if (await Validar())
        {
            ToastService.Notify(new(ToastType.Primary, "Cliente registrado exitosamente.", "Se ha guardado el cliente."));
            await ciudadesService.Guardar(nuevaCiudad);
            await Task.Delay(4000);
            nuevaCiudad = new Ciudades();
            navigation.NavigateTo("/Clientes/Index");
        }
    }
}
