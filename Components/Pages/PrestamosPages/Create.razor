@page "/Prestamos/Create"
@inject PrestamosService prestamosService
@inject NavigationManager navigation
@rendermode InteractiveServer

<PageTitle>Agregar Prestamo</PageTitle>
<EditForm Model="nuevoPrestamo" OnValidSubmit="GuardarPrestamo">
    <DataAnnotationsValidator />
    <div class="container">
        <div class="card shadow">
            <div class="card-header text-center bg-danger text-white">
                <h4>Registrar nuevo prestamo</h4>
            </div>

            <div class="card-body">
                <!-- Campo: PrestamoId -->
                <div class="form-group">
                    <label for="PrestamoId"><strong>ID del prestamo</strong></label>
                    <InputNumber id="PrestamoId" class="form-control" @bind-Value="nuevoPrestamo.PrestamoId" readonly />
                    <ValidationMessage For="@(() => nuevoPrestamo.PrestamoId)" />
                </div>

                <!-- Campo: Monto -->
                <div class="form-group">
                    <label for="Monto"><strong>Descripcion</strong></label>
                    <InputNumber id="Monto" class="form-control" @bind-Value="nuevoPrestamo.Monto" />
                    <ValidationMessage For="@(() => nuevoPrestamo.Monto)" />
                </div>

                <!-- Campo: CantidadCuotas -->
                <div class="form-group">
                    <label for="CantidadCuotas"><strong>Cantidad de cuotas</strong></label>
                    <InputNumber id="CantidadCuotas" class="form-control" @bind-Value="nuevoPrestamo.CantidadCuotas" />
                    <ValidationMessage For="@(() => nuevoPrestamo.CantidadCuotas)" />
                </div>
            </div>

            <div class="card-footer text-center">
                <button type="submit" class="btn btn-success ml-2">Registrar</button>
                <a href="/Prestamos/Index" class="btn btn-danger ml-2">Volver</a>
            </div>
        </div>
    </div>
</EditForm>
@code {
    public Prestamos nuevoPrestamo = new Prestamos();
    [Inject] protected ToastService ToastService { get; set; }
    public List<Prestamos> Prestamos { get; set; } = new List<Prestamos>();

    protected override async Task OnInitializedAsync()
    {
        Prestamos = await prestamosService.Listar(c => c.PrestamoId > 0);
    }

    public async Task<bool> Validar()
    {
        return true;
    }

    public async Task GuardarPrestamo()
    {
        if (await Validar())
        {
            ToastService.Notify(new(ToastType.Primary, "Prestamo registrado exitosamente.", "Se ha guardado el prestamo."));
            await prestamosService.Guardar(nuevoPrestamo);
            await Task.Delay(4000);
            nuevoPrestamo = new Prestamos();
            navigation.NavigateTo("/Prestamos/Index");
        }
    }
}
