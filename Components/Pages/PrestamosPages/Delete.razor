@page "/Prestamos/Delete/{PrestamoId:int}"
  @inject ToastService Toast
@inject PrestamosService prestamosService
@inject NavigationManager navigation
@rendermode InteractiveServer


<PageTitle>Eliminar Prestamo</PageTitle>
<EditForm Model="PrestamoSeleccionado" OnValidSubmit="ConfirmarEliminacion">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="container">
        <div class="card shadow-lg">
            <!-- Encabezado -->
            <div class="card-header bg-danger text-white">
                <h4 class="bi bi-trash"> Eliminar prestamo</h4>
            </div>

            <div class="card-body">
                <article class="contenido">
                    <p class="texto-destacado">¿Deseas proceder con la eliminaci&oacute; de este prestamo?</p>
                    <div class="detalle">
                        <span><strong>ID: </strong>@PrestamoSeleccionado.PrestamoId</span>
                    </div>
                    <div class="detalle">
                        <span><strong>Monto: </strong>@PrestamoSeleccionado.Monto</span>
                    </div>
                    <div class="detalle">
                        <span><strong>CantidadCuotas: </strong>@PrestamoSeleccionado.CantidadCuotas</span>
                    </div>
                </article>
                <!-- Pie -->
                <footer class="pie text-center">
                    <a href="/Prestamos/Index" class="btn btn-info bi bi-arrow-left"> Regresar</a>
                    <button type="button" class="btn btn-danger  bi bi-trash" @onclick="ConfirmarEliminacion">Eliminar</button>
                </footer>
            </div>
        </div>
    </div>
</EditForm>
@code {
    [Parameter]
    public int PrestamoId { get; set; }
    public Prestamos PrestamoSeleccionado { get; set; } = new Prestamos();
    [Inject] protected ToastService NotificacionServicio { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (PrestamoId > 0)
        {
            PrestamoSeleccionado = await prestamosService.Buscar(PrestamoId);
        }
    }

    public async Task ConfirmarEliminacion()
    {
        if (PrestamoSeleccionado != null)
        {
            var resultado = await prestamosService.Eliminar(PrestamoId);
            if (resultado)
            {
                NotificacionServicio.Notify(new(ToastType.Danger, "Eliminado exitosamente.", "El prestamo se ha eliminado correctamenete!"));
                navigation.NavigateTo("/Prestamos/Index");
            }
            else
            {
                NotificacionServicio.Notify(new(ToastType.Warning, "Error al eliminar el prestamo", "Ocurrió un error al intentar eliminar el prestamo."));
            }
        }
    }
}
