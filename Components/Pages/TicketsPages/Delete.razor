@page "/Tickets/Delete/{TicketId:int}"
@inject ToastService Toast
@inject TicketsService ticketsService
@inject ClientesService clientesService
@inject TecnicosService tecnicosService
@inject NavigationManager navigation

<h3>Delete</h3>

@code {
    [Parameter]
    public int TicketId { get; set; }
    public List<Tecnicos> Tecnicos { get; set; } = new List<Tecnicos>();
    public List<Clientes> Clientes { get; set; } = new List<Clientes>();
    public Tickets TicketSeleccionado { get; set; } = new Tickets();
    [Inject] protected ToastService NotificacionServicio { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (TicketId > 0)
        {
            TicketSeleccionado = await ticketsService.Buscar(TicketId);
            Tecnicos = await tecnicosService.Listar(t => true);
            Clientes = await clientesService.Listar(t => true);

        }
    }

    public async Task ConfirmarEliminacion()
    {
        if (TicketSeleccionado != null)
        {
            var resultado = await ticketsService.Eliminar(TicketId);
            if (resultado)
            {
                NotificacionServicio.Notify(new(ToastType.Danger, "Eliminado exitosamente.", "El ticket se ha eliminado correctamenete!"));
                navigation.NavigateTo("/Tickets/Index");
            }
            else
            {
                NotificacionServicio.Notify(new(ToastType.Warning, "Error al eliminar el ticket", "Ocurrió un error al intentar eliminar el ticket."));
            }
        }
    }
}
