@page "/Tickets/Index"
@inject TicketsService ticketsService
@inject ClientesService clientesService
@inject TecnicosService tecnicosService
@inject NavigationManager navigation

<h3>Create</h3>

@code {
    public Tickets nuevoTicket = new Tickets();
    [Inject] protected ToastService ToastService { get; set; }
    public List<Tickets> Tickets { get; set; } = new List<Tickets>();
    public List<Clientes> Clientes { get; set; } = new List<Clientes>();
    public List<Tecnicos> Tecnicos { get; set; } = new List<Tecnicos>();
    private DateTime? Fecha { get; set; }



    protected override async Task OnInitializedAsync()
    {
        Tickets = await ticketsService.Listar(t => t.TicketId > 0);
        Clientes = await clientesService.Listar(c => true);
        Tecnicos = await tecnicosService.Listar(t => true);

    }

    public async Task<bool> Validar()
    {
        var DescripcionIdentica = await ticketsService.BuscarDescripcion(nuevoTicket.Descripcion);

        if (DescripcionIdentica != null)
        {
            ToastService.Notify(new(ToastType.Warning, "Esa descripción ya está registrada", " Por favor, utiliza otra descripción."));

            return false;
        }

        return true;
    }

    public async Task GuardarTicket()
    {
        if (await Validar())
        {
            ToastService.Notify(new(ToastType.Primary, "Ticket registrado exitosamente.", "Se ha guardado el ticket."));
            await ticketsService.Guardar(nuevoTicket);
            await Task.Delay(4000);
            nuevoTicket = new Tickets();
            navigation.NavigateTo("/Tickets/Index");
        }
    }
}
