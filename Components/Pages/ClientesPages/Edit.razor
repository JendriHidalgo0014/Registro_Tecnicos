@page "/Clientes/Edit/{ClienteId:int}"
@inject ToastService Toast
@inject ClientesService clientesService
@inject NavigationManager navigation
@rendermode InteractiveServer

<PageTitle>Agregar Cliente</PageTitle>
<EditForm Model="clienteModificado" OnValidSubmit="ModificarCliente">
    <DataAnnotationsValidator />
    <div class="container">
        <div class="card shadow">
            <div class="card-header text-center bg-danger text-white">
                <h4>Registrar Nuevo Cliente</h4>
            </div>

            <div class="card-body">
                <!-- Campo: ClienteId -->
                <div class="form-group">
                    <label for="clienteId"><strong>ID del Cliente</strong></label>
                    <InputNumber id="clienteId" class="form-control" @bind-Value="clienteModificado.ClienteId" readonly />
                    <ValidationMessage For="@(() => clienteModificado.ClienteId)" />
                </div>

                <!-- Campo: Nombres -->
                <div class="form-group">
                    <label for="nombre"><strong>Nombre del Cliente</strong></label>
                    <InputText id="nombre" class="form-control" @bind-Value="clienteModificado.Nombres" />
                    <ValidationMessage For="@(() => clienteModificado.Nombres)" />
                </div>

                <!-- Campo: Dirección -->
                <div class="form-group">
                    <label for="Direccion"><strong>Direcci&oacute;n del Cliente</strong></label>
                    <InputText Direccion="Direccion" class="form-control" @bind-Value="clienteModificado.Direccion" />
                    <ValidationMessage For="@(() => clienteModificado.Direccion)" />
                </div>

                <!-- Campo: FechaIngreso -->
                <div class="form-group">
                    <label for="FechaIngreso"><strong>Fecha de ingreso del Cliente</strong></label>
                    <InputDate id="FechaIngreso" class="form-control" @bind-Value="FechaIngreso" />
                    <ValidationMessage For="@(() => FechaIngreso)" />
                </div>

                <!-- Campo: LimiteCredito -->
                <div class="form-group">
                    <label for="LimiteCredito"><strong>Limite de Credito del Cliente</strong></label>
                    <InputNumber LimiteCredito="LimiteCredito" class="form-control" @bind-Value="clienteModificado.LimiteCredito" />
                    <ValidationMessage For="@(() => clienteModificado.LimiteCredito)" />
                </div>

            </div>

            <div class="card-footer text-center">
                <button type="submit" class="btn btn-success ml-2">Registrar</button>
                <a href="/Clientes/Index" class="btn btn-danger ml-2">Volver</a>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int ClienteId { get; set; }
    public Clientes clienteModificado { get; set; } = new Clientes();
    public bool NombreRepetido { get; set; }
    public List<Clientes> List { get; set; } = new List<Clientes>();
    private DateTime? FechaIngreso { get; set; } // Cambiar a DateTime o nullable

    private string FechaIngresoString
    {
        get => FechaIngreso?.ToString("yyyy-MM-dd") ?? string.Empty;
        set 
        {
            if (DateTime.TryParse(value, out var parsedDate))
            {
                FechaIngreso = parsedDate;
            }
            else
            {
                FechaIngreso = null;
            }
        }
    }


    public async Task<bool> Validar()
    {
        var existeCliente = await clientesService.BuscarNombres(clienteModificado.Nombres);

        NombreRepetido = existeCliente != null;
        return NombreRepetido;
    }



    public async Task ModificarCliente()
    {
        if (!await Validar())
        {
            await clientesService.Guardar(clienteModificado);

            Toast.Notify(new(ToastType.Success, "Modificado con exito!", "El cliente se ha modificado"));
            navigation.NavigateTo("/Clientes/Index");
        }
        else
        {
            Toast.Notify(new(ToastType.Danger, "Error al modificar el cliente", "Ese nombre ya esta registrado."));
        }
    }
}
