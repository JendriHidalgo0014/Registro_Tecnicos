@page "/Sistemas/Edit/{SistemaId:int}"
@inject ToastService Toast
@inject SistemasService sistemasService
@inject NavigationManager navigation
@rendermode InteractiveServer

<PageTitle>Editar Sistema</PageTitle>
<EditForm Model="sistemaModificado" OnValidSubmit="ModificarSistema">
    <DataAnnotationsValidator />
    <div class="container">
        <div class="card shadow">
            <div class="card-header text-center bg-danger text-white">
                <h4>Editar sistema</h4>
            </div>

            <div class="card-body">
                <!-- Campo: SistemaId -->
                <div class="form-group">
                    <label for="sistemaId"><strong>ID del sistema</strong></label>
                    <InputNumber id="sistemaId" class="form-control" @bind-Value="sistemaModificado.SistemaId" readonly />
                    <ValidationMessage For="@(() => sistemaModificado.SistemaId)" />
                </div>

                <!-- Campo: Descripcion -->
                <div class="form-group">
                    <label for="descripcion"><strong>Descripcion del sistema</strong></label>
                    <InputText id="descripcion" class="form-control" @bind-Value="sistemaModificado.Descripcion" />
                    <ValidationMessage For="@(() => sistemaModificado.Descripcion)" />
                </div>

                <!-- Campo: Complejidad -->
                <div class="form-group">
                    <label for="complejidad"><strong>Complejidad</strong></label>
                    <InputNumber id="complejidad" class="form-control" @bind-Value="sistemaModificado.Complejidad" />
                    <ValidationMessage For="@(() => sistemaModificado.Complejidad)" />
                </div>
            </div>

            <div class="card-footer text-center">
                <button type="submit" class="btn btn-success ml-2">Registrar</button>
                <a href="/Sistemas/Index" class="btn btn-danger ml-2">Volver</a>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int SistemaId { get; set; }
    public Sistemas sistemaModificado { get; set; } = new Sistemas();
    public bool sistemaRepetido { get; set; }
    public List<Sistemas> List { get; set; } = new List<Sistemas>();


    protected override async Task OnInitializedAsync()
    {
        if (SistemaId > 0)
        {
            sistemaModificado = await sistemasService.Buscar(SistemaId);
        }


    }


    public async Task<bool> Validar()
    {
        var existeTecnico = await sistemasService.BuscarDescripcion(sistemaModificado.Descripcion);

        sistemaRepetido = existeTecnico != null;
        return sistemaRepetido;
    }



    public async Task ModificarSistema()
    {
        if (!await Validar())
        {
            await sistemasService.Guardar(sistemaModificado);

            Toast.Notify(new(ToastType.Success, "Modificado con exito!", "El sistema se ha modificado"));
            navigation.NavigateTo("/Sistemas/Index");
        }
        else
        {
            Toast.Notify(new(ToastType.Danger, "Error al modificar el sistema", "Ese sistema ya esta registrado."));
        }
    }
}
